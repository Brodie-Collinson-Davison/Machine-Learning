<diagram program="umletino" version="14.4.0-SNAPSHOT"><zoom_level>10</zoom_level><element><id>UMLClass</id><coordinates><x>340</x><y>20</y><w>260</w><h>340</h></coordinates><panel_attributes>
Layer

--
_MEMBERS_
vector&lt;Neuron&gt; neurons

_CONSTRUCTORS_
Layer ()
Layer ( int numNeurons )

_ACCESSORS_
Matrix&lt;float&gt; getActivationMatrix ()
Matrix&lt;float&gt; getWeightMatrix ()
Matrix&lt;float&gt; getBiasMatrix ()
Matrix&lt;float&gt; getWeightedSumMatrix ()

_MUTATORS_
void setActivations ( Matrix&lt;float&gt; activations )
void setWeights ( Matrix&lt;float&gt; weights )
void setBiases ( Matrix&lt;float&gt; biases )</panel_attributes><additional_attributes></additional_attributes></element><element><id>UMLClass</id><coordinates><x>640</x><y>20</y><w>250</w><h>360</h></coordinates><panel_attributes>
Neuron

--
_MEMBERS_
float activation
float bias
float* weights
int numWeights

_CONSTRUCTORS_
Neuron ()
Neuron ( Neuron other )
Neuron ( const int&amp; numWeights )
Neuron ( const float* const weights )

_ACCESSORS_
float getActivation () const 
float getBias () const 
float* getWeights ()

_MUTATORS_
void setActivation ( const float&amp; activation )
void setBias ( const float&amp; bias )
void setWeights ( const float* const weights )
</panel_attributes><additional_attributes></additional_attributes></element><element><id>UMLClass</id><coordinates><x>0</x><y>20</y><w>290</w><h>340</h></coordinates><panel_attributes>
Neural Network

--
_MEMBERS_
vector&lt;Layer&gt; layers

_CONSTRUCTORS_
NeuralNetowrk ()
NeuralNetwork ( NeuralNetowrk other )
NeuralNetwork ( int numLayers, int* layerSizes, bool randomise )

_ACCESSORS_
Matrix&lt;float&gt; getInputs () const
Matrix&lt;float&gt; getOutputs () const

_MUTATORS_
Matrix&lt;float&gt; feedForward ( const float* const inputs )

</panel_attributes><additional_attributes></additional_attributes></element></diagram>