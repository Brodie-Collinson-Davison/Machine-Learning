
using System;
using System.Linq;
using System.IO;
using NN;
using System.Threading.Tasks;

static class MainClass
{
    private const string SAVE_FOLDER_NAME = "Saved_Networks";
    private const string PYTHON_LOG_VIEWER_NAME = "LogViewer.py";
    private const string LOG_FILE_NAME = "TrainingLog.csv";
    private const string CONFIG_FILE_NAME = "config.txt";
    private static string PYTHON_PATH;
    static void Main(string[] args)
    {
        // ensures environment is correct before executing program
        Initialize();

        // start the program
        RunProgramLoop();
    }

    private static void Initialize()
    {

        string parentPath = Directory.GetParent(Directory.GetCurrentDirectory()).FullName;

        try
        {
            string[] configFileLines = File.ReadAllLines(Path.Combine(parentPath, CONFIG_FILE_NAME));

            foreach (string s in configFileLines)
            {
                string arg = s.Substring(s.IndexOf ('<') + 1, s.IndexOf('>') - 1);
                string value = s.Substring(s.IndexOf('>') + 1);

                switch (arg)
                {
                    // set python path value
                    case "PythonPath":
                        PYTHON_PATH = value;
                        break;
                }
            }

        }
        catch (Exception e)
        {
            UI.Display_Error("Trouble reading the config file, please ensure that it is setup correctly");
            UI.Display_Error (e.Message, true);

            // exit the program
            System.Environment.Exit(-1);
        }


        if (!SearchForSaveFolder ())
        { 
            // create a folder for saving networks in the above directory
            Directory.CreateDirectory(Path.Combine(parentPath, SAVE_FOLDER_NAME));
        }
    }

    private static void RunLogViewer()
    {
        Task.Run(() =>
     {
         System.Diagnostics.ProcessStartInfo start = new System.Diagnostics.ProcessStartInfo();
          //python interprater location
          start.FileName = PYTHON_PATH;
          //argument with file name and input parameters
          start.Arguments = Path.Combine(Directory.GetCurrentDirectory(), PYTHON_LOG_VIEWER_NAME);
          start.UseShellExecute = false;// Do not use OS shell
          start.CreateNoWindow = true; // We don't need new window
          start.RedirectStandardOutput = false;// Any output, generated by application will be redirected back
          start.RedirectStandardError = false; // Any error in standard output will be redirected back (for example exceptions)
          start.LoadUserProfile = true;
         System.Diagnostics.Process process = System.Diagnostics.Process.Start(start);
     });
    }

    private static void RunProgramLoop()
    {
        bool flag_exit = false;
        bool flag_loadedNetwork = false;

        NeuralNetwork loadedNetwork = null;
        TrainingParams trainingParams = new TrainingParams();

        while (!flag_exit)
        {
            // main menu options
            string[] options = {
                "Load Network",
                "Create Network",
                "Save Network",
                "Test",
                "Train",
                "Exit"
            };

            int menuSelection;

            Console.Clear();

            if (!flag_loadedNetwork)
            {
                UI.DisplayInfo("No network loaded...");
                menuSelection = UI.MenuTree("[ Main Menu ]", options, "[ !NO NETWORK! ]");
            }
            else
            {
                menuSelection = UI.MenuTree("[ Main Menu ]", options, loadedNetwork.ToString());
            }

            // display menu options and get user item selection

            switch (menuSelection)
            {
                // Load Network
                case 1:
                    loadedNetwork = LoadNetwork();
                    flag_loadedNetwork = loadedNetwork != null;

                    break;

                // Create 
                case 2:
                    Console.Clear();

                    string args = UI.PromptUserInput("[ Enter the neural network structure in the argument format ]");

                    CostFunctions func = (CostFunctions)(UI.MenuTree("Select Cost function", Enum.GetNames(typeof(CostFunctions))) - 1);

                    try
                    {
                        loadedNetwork = new NeuralNetwork(args, func);
                        flag_loadedNetwork = true;
                    } catch (Exception e)
                    {
                        UI.Display_Error(e.Message);
                        flag_loadedNetwork = false;
                    }
                    break;

                // Save Network
                case 3:
                    if (flag_loadedNetwork)
                        SaveNetwork(loadedNetwork);
                    else
                    {
                        UI.DisplayInfo("You haven't loaded a network. Must load a network first in order to save");
                        UI.AssertContinue();
                    }

                    break;

                // Test
                case 4:
                    if (flag_loadedNetwork)
                    {
                        Console.Clear();
                        UI.DisplayInfo("Beggining testing");
                        float result = MNISTOptimiser.TestNetwork(loadedNetwork);
                        UI.DisplayInfo("Done");
                        UI.DisplayInfo($"Test result: {result * 100.0f}%");
                        UI.AssertContinue();
                    }
                    else
                    {
                        UI.DisplayInfo("You haven't loaded a network. Must load a network first in order to test");
                        UI.AssertContinue();
                    }
                    break;

                // Train
                case 5:
                    if (flag_loadedNetwork)
                        TrainingMenu(ref loadedNetwork, ref trainingParams);
                    else
                    {
                        UI.DisplayInfo("You haven't loaded a network. Must load a network first in order to train");
                        UI.AssertContinue();
                    }
                    break;

                // Exit
                case 6:
                    flag_exit = true;
                    break;
            }
        }
    }

    private static void TrainingMenu (ref NeuralNetwork net, ref TrainingParams tParams)
    {
        string[] options =
        {
            "Train for one epoch",
            "Train",
            "Change training parameters",
            "Exit"
        };

        bool flag_exit = false;

        // entering new menu, screen needs to be clear

        while (!flag_exit)
        {
            Console.Clear();
            int response = UI.MenuTree("Training Menu", options, tParams.ToString());

            switch (response)
            {
                // train for 1 epoch
                case 1:
                    // Create / clean log file 
                    new FileStream(LOG_FILE_NAME, FileMode.Create).Close();

                    // open log viewer
                    RunLogViewer();

                    // create a temporary training parameters with only one epoch
                    TrainingParams tp = new TrainingParams(tParams);
                    tp.MaxEpoch = 1;

                    Console.Clear();
                    MNISTOptimiser.TrainNetwork(net, tp, LOG_FILE_NAME);
                    break;

                // train 
                case 2:
                    // Create / clean log file 
                    new FileStream(LOG_FILE_NAME, FileMode.Create).Close ();

                    // open log viewer
                    RunLogViewer();

                    Console.Clear();
                    MNISTOptimiser.TrainNetwork(net, tParams, LOG_FILE_NAME);
                    break;

                // Change training params
                case 3:
                    tParams = TrainingParamsMenu(tParams);
                    break;

                // exit
                case 4:
                    flag_exit = true;
                    break;
            }
        }
    }

    // Handle user interaction with changing TrainingParams for network training
    private static TrainingParams TrainingParamsMenu (TrainingParams tParams)
    {
        bool flag_exit = false;


        String[] menu_options =
        {
            "Optimizer",
            "alpha",
            "beta 1",
            "beta 2",
            "Batch Size",
            "Target Cost",
            "Max Epoch",
            "Revert to Default HyperParameters",
            "Exit To Training Menu"
        };

        // entering a new menu, screen needs to be clear
        
        // menu interaction loop
        while (!flag_exit)
        {
            // display menu
            int response = UI.MenuTree("Select Training HyperParameter to change: ", menu_options, tParams.ToString());

            // clear screen to input new value
            Console.Clear();

            Console.WriteLine(tParams.ToString());
            
            // handle response
            switch (response)
            {
                // optimizer
                case 1:
                    Console.Clear();
                    Optimizers newOptimizer = (Optimizers)UI.SelectEnum("Select an optimizer", typeof(Optimizers));
                    tParams.Optimizer = newOptimizer;
                    break;

                // alpha
                case 2:
                    float newLearningRate = UI.Query_Float("Enter the new learning rate (alpha):", 1e-9f, 1);
                    tParams.Alpha = newLearningRate;
                    break;

                // beta1
                case 3:
                    float newMomentum = UI.Query_Float("Enter the new linear momentum term (beta1):", 1e-9f, 0.9999999f);
                    tParams.Beta1 = newMomentum;
                    break;

                // beta2
                case 4:
                    float newSqrMomentum = UI.Query_Float("Enter the new RMS momentum term (beta2):", 1e-9f, 0.9999f);
                    tParams.Beta2 = newSqrMomentum;
                    break;

                // batch size
                case 5:
                    int newBatchSize = UI.Query_Int("Enter new batch size:", 1, 5000);
                    tParams.BatchSize = newBatchSize;
                    break;

                // target cost
                case 6:
                    float newTargetCost = UI.Query_Float("Enter the new target cost:", 0.01f, 1);
                    tParams.TargetCost = newTargetCost;
                    break;

                // max epoch
                case 7:
                    int newMaxEpoch = UI.Query_Int("Enter new max Epoch:", 1, 10);
                    tParams.MaxEpoch = newMaxEpoch;
                    break;

                // restore defaults
                case 8:
                    tParams = new TrainingParams();
                    break;

                // exit
                case 9:
                    flag_exit = true;
                    break;
            }
        }

        return tParams;
    }

    private static void SaveNetwork (NeuralNetwork net)
    {
        Console.Clear();

        string fileName = UI.PromptUserInput ("Enter the name to save the network as (.json)");

        if (!fileName.Contains(".json"))
            fileName = String.Concat(fileName, ".json");
        
        string[] savedNetworkNames = FindSaveFileNames();
        if (savedNetworkNames.Contains(fileName))
        {
            UI.DisplayInfo("saved network already exists. Overwrite?");
            bool overwrite = UI.YesNoQuestion(true, true);

            if ( overwrite )
            {
                string json = net.GetJSONString();

                fileName = Path.Combine(GetSaveFilePath(), fileName);

                UI.DisplayInfo($"Saving network as:{fileName}");
                FileManager.WriteFile(fileName, json);
                UI.DisplayInfo("Done");
                Console.ReadLine();
            }
        } else
        {
            string json = net.GetJSONString();

            fileName = Path.Combine(GetSaveFilePath(), fileName);

            UI.DisplayInfo($"Saving network as:{fileName}");
            FileManager.WriteFile(fileName, json);
            UI.DisplayInfo("Done");
            Console.ReadLine();
        }
    }

    private static NeuralNetwork LoadNetwork()
    {
        NeuralNetwork net = null;

        Console.Clear();

        string[] savedFileNames = FindSaveFileNames();        

        if (savedFileNames.Length > 0)
        {
            // display names
            string savedFileName = UI.ListSelection("[ Select the network to load ]", savedFileNames);

            // read file json
            string json = FileManager.ReadFile(Path.Combine(GetSaveFilePath(), savedFileName));

            net = NeuralNetwork.DeserializeFromJSON(json);
        }
        else
        {
            UI.DisplayInfo("No saved networks found");
            UI.AssertContinue();
        }

        Console.Clear();

        return net;
    }

    private static string GetSaveFilePath ()
    {
        return Path.Combine(Directory.GetParent(Directory.GetCurrentDirectory()).FullName, SAVE_FOLDER_NAME);
    }

    private static string [] FindSaveFileNames ()
    {
        // find saved neural network names
        string saveFilePath = GetSaveFilePath();
        string[] fileNames = Directory.GetFiles(saveFilePath);

        for (int i = 0; i < fileNames.Length; i++)
        {
            string str = Path.GetFileName (fileNames[i]);
            fileNames[i] = str;
        }

        return fileNames;
    }

    private static bool SearchForSaveFolder ()
    {
        bool result = false;

        string current = Directory.GetCurrentDirectory();

        // serach directory above
        if (Directory.Exists (Path.Combine (Directory.GetParent (current).FullName, SAVE_FOLDER_NAME)))
            result = true;

        return result;
    }
}